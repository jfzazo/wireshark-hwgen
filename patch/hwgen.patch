Binary files wireshark-1.99.2-mod/.DS_Store and wireshark-1.99.2/.DS_Store differ
Binary files wireshark-1.99.2-mod/packaging/.DS_Store and wireshark-1.99.2/packaging/.DS_Store differ
Binary files wireshark-1.99.2-mod/wiretap/.DS_Store and wireshark-1.99.2/wiretap/.DS_Store differ
diff -rupN wireshark-1.99.2-mod/wiretap/CMakeLists.txt wireshark-1.99.2/wiretap/CMakeLists.txt
--- wireshark-1.99.2-mod/wiretap/CMakeLists.txt	2015-03-04 20:41:55.000000000 +0100
+++ wireshark-1.99.2/wiretap/CMakeLists.txt	2015-02-04 20:32:53.000000000 +0100
@@ -77,7 +77,6 @@ set(CLEAN_FILES
 	vms.c
 	vwr.c
 	wtap.c
-	hw-gen.c
 )
 
 set(DIRTY_FILES
diff -rupN wireshark-1.99.2-mod/wiretap/file_access.c wireshark-1.99.2/wiretap/file_access.c
--- wireshark-1.99.2-mod/wiretap/file_access.c	2015-03-04 20:54:49.000000000 +0100
+++ wireshark-1.99.2/wiretap/file_access.c	2015-02-04 20:32:54.000000000 +0100
@@ -88,7 +88,6 @@
 #include "stanag4607.h"
 #include "capsa.h"
 #include "pcap-encap.h"
-#include "hw-gen.h"
 
 /*
  * Add an extension, and all compressed versions thereof, to a GSList
@@ -157,7 +156,6 @@ static const struct file_extension_info 
 	{ "MPEG2 transport stream", "mp2t;ts;mpg" },
 	{ "Ixia IxVeriWave .vwr Raw 802.11 Capture", "vwr" },
 	{ "CAM Inspector file", "camins" },
-	{ "HW FPGA generator format", "simple" },	
 };
 
 #define	N_FILE_TYPE_EXTENSIONS	(sizeof file_type_extensions_base / sizeof file_type_extensions_base[0])
@@ -397,7 +395,6 @@ static struct open_info open_info_base[]
 	/* Extremely weak heuristics - put them at the end. */
 	{ "Ixia IxVeriWave .vwr Raw Capture",       OPEN_INFO_HEURISTIC, vwr_open,                 "vwr",      NULL, NULL },
 	{ "CAM Inspector file",                     OPEN_INFO_HEURISTIC, camins_open,              "camins",   NULL, NULL },
-	{ "HW FPGA generator format",           	OPEN_INFO_MAGIC,     hwgen_open,               "simple",     NULL, NULL },	
 };
 
 /* this is only used to build the dynamic array on load, do NOT use this
@@ -1196,10 +1193,6 @@ static const struct file_type_subtype_in
 	  FALSE, FALSE, 0,
 	  libpcap_dump_can_write_encap, libpcap_dump_open, NULL },
 
-	{ "HW FPGA generator format", "hw_gen", "simple", NULL,
-	  FALSE, FALSE, 0,
-	  hwgen_dump_can_write_encap, hwgen_dump_open, NULL },
-
 	/* WTAP_FILE_TYPE_SUBTYPE_5VIEWS */
 	{ "InfoVista 5View capture", "5views", "5vw", NULL,
 	   TRUE, FALSE, 0,
diff -rupN wireshark-1.99.2-mod/wiretap/hw-gen.c wireshark-1.99.2/wiretap/hw-gen.c
--- wireshark-1.99.2-mod/wiretap/hw-gen.c	2015-03-04 22:42:05.000000000 +0100
+++ wireshark-1.99.2/wiretap/hw-gen.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,206 +0,0 @@
-/* hwgen.c
- *
- * Jose Fernando Zazo
- */
-
-
-#include "config.h"
-
-#include <string.h>
-#include <wtap-int.h>
-#include <file_wrappers.h>
-
-#include "hw-gen.h"
-
-
-
-static gboolean
-hwgen_read_packet(wtap *wth, FILE_T fh, struct wtap_pkthdr *phdr,
-    Buffer *buf, int *err, gchar **err_info)
-{
-  guint packet_size;
-  guint orig_size;
-  struct hwgen_hdr hdr;
-  guint32 padding = 0;
-  wth = wth;
-
-
-  /*
-   * Read the header.
-   */
-  if (!wtap_read_bytes_or_eof(fh, &hdr, sizeof hdr, err, err_info))
-    return FALSE;
-
-  if(hdr.magic_word!=0x6969) {
-    *err = WTAP_ERR_BAD_FILE;
-    if (err_info != NULL) {
-      *err_info = g_strdup_printf("hwgen format: It was impossible to locate the magic word in the header");
-    }
-    return FALSE;    
-  }
-
-  packet_size = hdr.size;
-  orig_size   = hdr.size;
-
-
- /* phdr_len = pcap_process_pseudo_header(fh, wth->file_type_subtype,
-      wth->file_encap, packet_size, TRUE, phdr, err, err_info);
-  if (phdr_len < 0)
-    return FALSE;  */
-
-
-
-  phdr->rec_type = REC_TYPE_PACKET;
-//  phdr->presence_flags = WTAP_HAS_TS|WTAP_HAS_CAP_LEN; //We dont provide of timestamp or caplen
-//  phdr->ts.secs = 0;
-//  phdr->ts.nsecs = hdr.ifg; //hdr.hdr.ts_usec;
-
-  phdr->caplen = packet_size;
-  phdr->len    = orig_size;
-
-  /*
-   * Read the packet data.
-   */
-  if (!wtap_read_packet_bytes(fh, buf, packet_size, err, err_info))
-    return FALSE; /* failed */
-
-  /*
-   * Read the padding.
-   */
-  if (!wtap_read_bytes_or_eof(fh, &padding, 4 - (phdr->caplen%4), err, err_info))
-    return FALSE; 
-
-
-  return TRUE;
-}
-
-
-static gboolean hwgen_read(wtap *wth, int *err, gchar **err_info,
-    gint64 *data_offset)
-{
-  *data_offset = file_tell(wth->fh);
-
-  return hwgen_read_packet(wth, wth->fh, &wth->phdr,
-      wth->frame_buffer, err, err_info);
-}
-
-static gboolean hwgen_seek_read(wtap *wth, gint64 seek_off, struct wtap_pkthdr *phdr,
-    Buffer *buf, int *err, gchar **err_info)
-{
-  if (file_seek(wth->random_fh, seek_off, SEEK_SET, err) == -1)
-    return FALSE;
-
-  if (!hwgen_read_packet(wth, wth->random_fh, phdr, buf, err,
-      err_info)) {
-    if (*err == 0)
-      *err = WTAP_ERR_SHORT_READ;
-    return FALSE;
-  }
-  return TRUE;
-}
-
-
-int hwgen_dump_can_write_encap(int encap)
-{
-  encap = 0; //Warnings are treat as errors -.-
-  return 0;
-}
-
-
-static gboolean hwgen_dump(wtap_dumper *wdh,
-  const struct wtap_pkthdr *phdr,
-  const guint8 *pd, int *err, gchar **err_info _U_)
-{
-  //const union wtap_pseudo_header *pseudo_header = &phdr->pseudo_header;
-  struct hwgen_hdr rec_hdr;
-  guint32 padding = 0;
-
-  /* We can only write packet records. */
-  if (phdr->rec_type != REC_TYPE_PACKET) {
-    *err = WTAP_ERR_UNWRITABLE_REC_TYPE;
-    return FALSE;
-  }
-
-  /* Don't write anything we're not willing to read. */
-  if (phdr->caplen + phdr->caplen + sizeof rec_hdr  > WTAP_MAX_PACKET_SIZE) {
-    *err = WTAP_ERR_PACKET_TOO_LARGE;
-    return FALSE;
-  }
-
-  rec_hdr.ifg = 3;  
-  rec_hdr.magic_word = 0x6969;
-  rec_hdr.size = phdr->caplen;
-
-  if (!wtap_dump_file_write(wdh, &rec_hdr, sizeof rec_hdr, err))
-    return FALSE;
-  wdh->bytes_dumped += sizeof rec_hdr;
-
-  if (!wtap_dump_file_write(wdh, pd, phdr->caplen, err))
-    return FALSE;
-  if (!wtap_dump_file_write(wdh, &padding, 4 - (phdr->caplen%4), err))
-    return FALSE;
-  wdh->bytes_dumped += phdr->caplen + 4 - (phdr->caplen%4);
-  return TRUE;
-}
-
-/* Returns TRUE on success, FALSE on failure; sets "*err" to an error code on
-   failure */
-gboolean hwgen_dump_open(wtap_dumper *wdh, int *err)
-{
-  
-  err = NULL;
-
-  wdh->subtype_write = hwgen_dump;
-  wdh->subtype_close = NULL;
-
-
-  return TRUE;  
-}
-
-
-
-wtap_open_return_val hwgen_open(wtap *wth, int *err, gchar **err_info _U_)
-{
-  guint8  block[4];
-
-  if (!wtap_read_bytes(wth->fh, block, sizeof(block), err, err_info)) {
-      if (*err == WTAP_ERR_SHORT_READ)
-        return WTAP_OPEN_ERROR;
-  }
-
-  if (!(block[2]==0x69 && block[3] == 0x69)) {
-    return WTAP_OPEN_NOT_MINE; 
-  }
-
-
-  /* rewind the fh so we re-read from the beginning */
-  if (-1 == file_seek(wth->fh, 0, SEEK_SET, err))
-      return WTAP_OPEN_ERROR;
-
-  wth->file_encap = WTAP_ENCAP_HW_GENERATOR;
-  wth->snapshot_length = 0;
-  wth->file_tsprec = WTAP_TSPREC_NSEC;
-
-  wth->priv = NULL;
-
-  wth->subtype_read = hwgen_read;
-  wth->subtype_seek_read = hwgen_seek_read;
-  wth->file_type_subtype = WTAP_FILE_TYPE_SUBTYPE_HWGEN_V1;
-
-  *err = 0;
-  return WTAP_OPEN_MINE;
-}
-
-
-/*
- * Editor modelines  -  http://www.wireshark.org/tools/modelines.html
- *
- * Local variables:
- * c-basic-offset: 4
- * tab-width: 8
- * indent-tabs-mode: nil
- * End:
- *
- * vi: set shiftwidth=4 tabstop=8 expandtab:
- * :indentSize=4:tabSize=8:noTabs=true:
- */
diff -rupN wireshark-1.99.2-mod/wiretap/hw-gen.h wireshark-1.99.2/wiretap/hw-gen.h
--- wireshark-1.99.2-mod/wiretap/hw-gen.h	2015-03-04 21:01:54.000000000 +0100
+++ wireshark-1.99.2/wiretap/hw-gen.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,21 +0,0 @@
-/*
- *	Jose Fernando Zazo
- */
-
-#ifndef _HWGEN_H
-#define _HWGEN_H
-
-#include <glib.h>
-#include <wiretap/wtap.h>
-
-struct hwgen_hdr {
-	guint16	size;	
-	guint16	magic_word;	
-	gint32	ifg;	
-}; 
-
-wtap_open_return_val hwgen_open(wtap *wth, int *err, gchar **err_info);
-gboolean hwgen_dump_open(wtap_dumper *wdh, int *err);
-int hwgen_dump_can_write_encap(int encap);
-
-#endif
diff -rupN wireshark-1.99.2-mod/wiretap/libpcap.c wireshark-1.99.2/wiretap/libpcap.c
--- wireshark-1.99.2-mod/wiretap/libpcap.c	2015-03-04 22:31:19.000000000 +0100
+++ wireshark-1.99.2/wiretap/libpcap.c	2015-02-04 20:32:54.000000000 +0100
@@ -894,6 +894,7 @@ static gboolean libpcap_dump(wtap_dumper
 	struct pcaprec_ss990915_hdr rec_hdr;
 	size_t hdr_size;
 	int phdrsize;
+
 	phdrsize = pcap_get_phdr_size(wdh->encap, pseudo_header);
 
 	/* We can only write packet records. */
diff -rupN wireshark-1.99.2-mod/wiretap/pcap-common.c wireshark-1.99.2/wiretap/pcap-common.c
--- wireshark-1.99.2-mod/wiretap/pcap-common.c	2015-03-04 22:40:22.000000000 +0100
+++ wireshark-1.99.2/wiretap/pcap-common.c	2015-02-04 20:32:54.000000000 +0100
@@ -93,7 +93,6 @@ static const struct {
 	 */
 	{ 0,		WTAP_ENCAP_NULL },	/* null encapsulation */
 	{ 1,		WTAP_ENCAP_ETHERNET },
-	{ 1,		WTAP_ENCAP_HW_GENERATOR },
 	{ 3,		WTAP_ENCAP_AX25 },
 	{ 6,		WTAP_ENCAP_TOKEN_RING },	/* IEEE 802 Networks - assume token ring */
 	{ 7,		WTAP_ENCAP_ARCNET },
diff -rupN wireshark-1.99.2-mod/wiretap/wtap.h wireshark-1.99.2/wiretap/wtap.h
--- wireshark-1.99.2-mod/wiretap/wtap.h	2015-03-04 20:31:02.000000000 +0100
+++ wireshark-1.99.2/wiretap/wtap.h	2015-02-04 20:32:54.000000000 +0100
@@ -265,7 +265,6 @@ extern "C" {
 #define WTAP_ENCAP_PKTAP                        172
 #define WTAP_ENCAP_EPON                         173
 #define WTAP_ENCAP_IPMI_TRACE                   174
-#define WTAP_ENCAP_HW_GENERATOR          		175
 /* After adding new item here, please also add new item to encap_table_base array */
 
 #define WTAP_NUM_ENCAP_TYPES                    wtap_get_num_encap_types()
@@ -352,7 +351,6 @@ extern "C" {
 #define WTAP_FILE_TYPE_SUBTYPE_LOGCAT_LONG                   74
 #define WTAP_FILE_TYPE_SUBTYPE_COLASOFT_CAPSA                75
 #define WTAP_FILE_TYPE_SUBTYPE_COLASOFT_PACKET_BUILDER       76
-#define WTAP_FILE_TYPE_SUBTYPE_HWGEN_V1						 77
 
 #define WTAP_NUM_FILE_TYPES_SUBTYPES  wtap_get_num_file_types_subtypes()
 
